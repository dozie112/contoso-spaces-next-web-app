name: Build and Release Next.js web application

on:
  push:
    branches: [ "main" ]

# Allow the workflow to publish releases
permissions:
  contents: write

jobs:
  build-project:
    name: Build project
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Debug build outputs
        run: |
          echo "Root:" && ls -la
          echo ".next:" && (ls -la .next || true)
          echo "out:" && (ls -la out || true)

      # Upload .next (SSR build)
      - name: Upload .next artifact (if present)
        if: ${{ hashFiles('.next/**') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: next-build
          path: .next

      # Upload out (static export)
      - name: Upload out artifact (if present)
        if: ${{ hashFiles('out/**') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: next-export
          path: out
      - name: Export static site (if not already exporting)
        run: npx next export || true

      - name: Start static server for smoke test
        run: |
          npx serve -s out -l 3000 &
          echo $! > /tmp/serve.pid
          sleep 2

      - name: Smoke test homepage
        run: |
          set -e
          curl -fI http://localhost:3000/ | tee /tmp/curl_home.txt
          pkill -F /tmp/serve.pid || true


  release-project:
    name: Create and Upload GitHub Release
    runs-on: ubuntu-latest
    needs: build-project

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      # Download the exported build artifact
      - name: Download static export (out/)
        uses: actions/download-artifact@v4
        with:
          name: next-export
          path: site

      - name: Display structure of downloaded files
        run: ls -R site

      # Zip the downloaded site for release
      - name: Create ZIP archive
        run: |
          cd site
          zip -r ../site-v${{ github.run_number }}.zip .
          cd ..

      # Create a GitHub release (with tag)
      - name: Create GitHub Release
        id: create_new_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: "Release ${{ github.run_number }}"
          draft: false
          prerelease: false

      # Upload ZIP file to the GitHub Release
      - name: Upload Release Asset (ZIP)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_new_release.outputs.upload_url }}
          asset_path: ./site-v${{ github.run_number }}.zip
          asset_name: site-v${{ github.run_number }}.zip
          asset_content_type: application/zip
